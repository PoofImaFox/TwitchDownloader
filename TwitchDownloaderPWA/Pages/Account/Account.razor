@page "/Account/{accountName?}"

@inject TwitchDownloader.Services.TwitchGraphQlClient _twitchGraphQlClient;

@functions {
    [Parameter]
    public string AccountName { get; set; }

    public TwitchUser TwitchUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        TwitchUser = await _twitchGraphQlClient.TwitchUserApi.GetUserByUsername(AccountName);
        await base.OnInitializedAsync();
    }
}

<div class="w-100 h-25 shadow-lg shadow" style="background-image:url(@TwitchUser.BannerImageURL); opacity:0.2;">
    <div class="w-100 h-100" style="background-color:pink; opacity:0.5;" />
</div>

<div class="position-absolute top-50 start-50 w-50 translate-middle round-3 shadow text-start text-light" style="background-color:rgba(15, 15, 10, .75)">
    <div class="vstack gap-1 text-start m-lg-5">
        <div class="text-center">
            <p class="display-6 fw-semibold">Account: @TwitchUser.Login, @TwitchUser.Id</p>
        </div>

        <hr />

        <div class="hstack gap-0">
            <div class="vstack gap-0 border border-warning">
                @foreach (var property in typeof(TwitchUser).GetProperties().OrderBy(i => i.Name))
                {
                    var propertyName = property.Name;
                    var propertyValue = property.GetValue(TwitchUser)?.ToString() ?? string.Empty;

                    if (propertyValue.StartsWith("http"))
                    {
                        <p class="lead">
                            <a href="@propertyValue">
                                @propertyName
                            </a>
                        </p>
                    }
                    else
                    {
                        <p class="lead">
                            @propertyName: @propertyValue
                        </p>
                    }
                }
            </div>

            <div class="vstack gap-0 w-50 border border-primary">
                <div class="accordion " id="videoClipAccordion">

                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                Video Clip One
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#videoClipAccordion">
                            <div class="accordion-body">
                                <p class="lead">
                                    Clip Title: This is a clip <br />
                                    Clip Length: 80:45:23 <br />
                                    Cliped On: 08/18/1998 <br />
                                </p>
                            </div>
                        </div>
                    </div>

                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingTwo">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                Video Clip Two
                            </button>
                        </h2>
                        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#videoClipAccordion">
                            <div class="accordion-body">
                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                            </div>
                        </div>
                    </div>

                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingThree">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                Video Clip Three
                            </button>
                        </h2>
                        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#videoClipAccordion">
                            <div class="accordion-body">
                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                            </div>
                        </div>
                    </div>

                    <p class="lead">This design is still in progress...</p>
                </div>
            </div>
        </div>
    </div>
</div>